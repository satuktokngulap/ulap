#!/bin/bash

# Include init.d "functions" file, to be able to use echo_success and
# echo_failure functions
. /etc/init.d/functions

# Take time stamp to be used for the log/dump file
STAMP=$(date +%m%d%y%H%M)

# Redirectcommands that output to standard output to the following $LOG file
LOG="/root/gatekeep_mgmt_$STAMP"

USER=`whoami`
echo "Generated by user $USER" >> $LOG
echo `date` >> $LOG
echo >> $LOG

SCHID=`uname -n|gawk -F. '{print $2}'`

checkos() {
	echo "Checking OS version..."
        	arch=$(cat /proc/version | gawk '{print $3}')
		version=$(cat /etc/issue | gawk 'NR==1 {print $1" "$3}')
	        echo -ne "\t$version ${arch:(-6)}"
	       	if [ "${arch:(-6)}" = "x86_64" -a "$version" = "CentOS 6.5" ]; then
	                echo_success
        	        echo
			return 0
	else
	        echo -ne "Incorrect version!"
	        echo_failure
	        echo
		return 1
	fi
}

#Function for checking hostname
chkname(){
	echo -n "Checking if host name is in the proper format.."
	if [[ "$(hostname)" = "ldap.$SCHID.cloudtop.ph" ]]; then
		echo_success
		echo
		return 0
	else
		echo_failure
		echo
		return 1
	fi
}

chkhosts () {
	echo "Checking if /etc/hosts entries are complete.."
        # List of hostnames that must appear in /etc/hosts
        hostnames=( switch.local ldap.$SCHID.cloudtop.ph lms.cloudtop.ph rdpa.$SCHID.cloudtop.ph rdpb.$SCHID.cloudtop.ph sa.$SCHID.cloudtop.ph sb.$SCHID.cloudtop.ph )
        for name in ${hostnames[@]}
        do
                echo -ne "\t$name .."
                grep $name /etc/hosts >> $LOG
                if [ $? -eq 0 ]; then
                        echo -n "found!"
                        echo_success
                        echo
                else
                        echo -n "missing!"
                        echo_failure
                        echo
                        return 1
                fi
        done
        return 0
}

#Function for checking if SSL certificate is present
chksslcert(){
	echo "Checking if SSL certificate exists..."
	if [[ -z `certutil -L -d /etc/openldap/certs | grep "OpenLDAP Server" | awk '{print $1,$2}'` ]]; then
		echo -ne "\tSSL certificate ..not existing!"
		echo_failure
		echo
		return 1
	else
		echo -ne "\tSSL certificate ..existing!"
		echo_success
		echo
		return 0
	fi
}

#Function for checking if SSL cert can be retrieved over the network
chkssl(){
	echo "Checking if openssl connection to this VM works..."
	timeout 5 openssl s_client -connect ldap.$SCHID.cloudtop.ph:636 &> out
	ERR=$(cat out | grep err )

	if [[ -z $ERR ]]; then
		echo -ne "\tcertificate ..working!"
		echo_success
		echo
		return 0
	else
		if [[ $ERR =~ .*self\ signed.*  ]]; then
			echo -ne "\tcertificate ..self signed!"
			echo_warning
			echo
			return 0
		else
			echo -ne "\tcertificate ..error!"
			echo -ne "\t$ERR"
			echo_failure
			return 1
		fi
	fi
}

chksysconfigldap(){
	echo "Checking if LDAPS is configured properly.."
	LDAPS=`cat /etc/sysconfig/ldap|grep "SLAPD_LDAPS=yes"`
	if [ $? -eq 0  ]; then
		echo -ne "\tLDAPS.. configured!"
		echo_success
		echo
		return 0
	else
		echo -ne "\tLDAPS.. not configured!"
		echo_failure
		echo ""
		return 1
	fi
	
	LDAPS=`cat /etc/sysconfig/ldap|grep "SLAPD_LDAP=no"`
	if  [ $? -eq 0 ]; then
		echo -ne "\tSLAPD.. configured!"
		echo_success
		echo
		return 0
	else
		echo -ne "\tSLAPD.. not configured!"
		echo_failure
		return 1
	fi
}

chkldap(){
	echo "Validating SLAPD config.."
	slaptest -uv
	if [ $? -eq 0 ]; then
		echo_success
	else
		echo_failure
		return 1
	fi
	echo -ne "\nChecking if SLAPD service is running.."
	status=`service slapd status`
	if [[ $status = "slapd is stopped" ]]; then
		echo -ne "\n\tslapd ..not running!"
		echo_failure
		return 1
	else
		echo -ne "\n\tslapd ..running!"
		echo_success
		return 0
	fi
}

# Function that checks if the network interfaces are configured correctly.
# The baremetal should have 4 interfaces configured: br0, br1, eth0, and eth1
# br0 and br1 are bridged to eth0 and eth1 respectively.
# br0 should be configured with an IP address.
chkiface() {
	echo "Checking network interfaces"
	ifaces=( `ifconfig -a | sed 's/[ \t].*//;/^\(lo\|\|v.*\)$/d'` )

	# Check if there are indeed 4 interfaces
	if [ ${#ifaces[@]} -ne 2 ]; then
		echo -n "incorrect # of interfaces!"
		echo_failure
		echo
		return 1
	fi

	for i in ${ifaces[@]}
	do
		case $i in
		eth0)
			# Check if br0 has an IP address
			ip=`ifconfig $i | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`

			# Check if gateway is pingable
			gateway=`echo $ip | gawk -F. '{print $1"."$2"."$3".1"}'`
        	        echo -ne "\t$i $ip...pinging gateway $gateway "
	                chkping=`ping -c 2 $gateway`
        	        if [ $? -eq 0 ]; then
	                        echo_success
	                        echo
	                else
	                        echo_failure
	                        echo
	                        return 1
	                fi
		;;
		eth1)
			ip=`ifconfig $i | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
			echo -ne "\t$i $ip"
			echo_success
			echo
		;;
		*)
			# Check fails if interface does not follow naming
			# convention
			echo "\t$i $ip - unexpected interface!"
			echo_failure
			echo
			return 1
		;;
		esac
	done
	return 0
}

pingtest() {
        echo -e "\nPing tests on /etc/hosts addresses.."
        hosts=( `cat /etc/hosts | gawk '!/127.0.0.1|::1|^#|^'$HOSTNAME'/ && /./ {print $1","$2}'` )
        for host in ${hosts[@]}
        do
        echo -ne "\tPinging $host.." | tee -a $LOG
        addr=$(echo $host | gawk -F, '{print $2}')
        ping -c 2 $addr >> $LOG
                if [ $? -eq 0 ]; then
                        echo_success
                        echo
                else
                        echo_failure
                        echo
                        return 1
                fi
        done
	return 0
}

chkinternet() {
        echo -ne "Checking internet connection.. "
        echo
        internet=`ping -c 4 8.8.8.8 | grep 'received' | awk -F',' '{ print $2}' | awk '{ print $1}'`
        if [ $internet -gt 0 ]; then
                echo -ne "\tInternet connection ..available!"
                echo_success
                echo
        else
                echo -ne "\tInternet connection ..not available!"
                echo_failure
                echo
        fi
        return 0
}

chknfs(){
        echo "Checking if NFS is running and configured properly"
        status=`service --status-all|grep nfs|awk '{print $1, $(NF-1), $NF}'`
        if [[ $status = "nfsd is stopped" ]]; then
                echo -ne "\tnfs ..not running!"
                echo_failure
                echo
                return 1
        else
                echo -ne "\tnfs ..running!"
                echo_success
                echo
                rquotad=`cat /etc/sysconfig/nfs |grep -v '^#'|grep -i rquotad_port`
                if [ $? -eq 0 ]; then
                        echo -ne "\trquoatd.. configured!"
                        echo_success
                        echo
                else
                        echo -ne "\trquoatd.. not configured!"
                        echo_failure
                        echo
                        return 1
                fi
                lockd_tcp=`cat /etc/sysconfig/nfs |grep -v '^#'|grep -i lockd_tcpport`
                if [ $? -eq 0 ]; then
                        echo -ne "\tlockd_tcp.. configured!"
                        echo_success
                        echo
                else
                        echo -ne "\tlockd_tcp.. not configured!"
                        echo_failure
                        echo
                        return 1
                fi
                lockd_udp=`cat /etc/sysconfig/nfs |grep -v '^#'|grep -i lockd_udpport`
                if [ $? -eq 0 ]; then
                        echo -ne "\tlockd_udp.. configured!"
                        echo_success
                        echo
                else
                        echo -ne "\tlockd_udp.. not configured!"
                        echo_failure
                        echo
                        return 1
                fi
                mountd=`cat /etc/sysconfig/nfs |grep -v '^#'|grep -i mountd_port`
                if [ $? -eq 0 ]; then
                        echo -ne "\tmountd.. configured!"
                        echo_success
                        echo
                else
                        echo -ne "\tmountd.. not configured!"
                        echo_failure
                        echo
                        return 1
                fi
                statd=`cat /etc/sysconfig/nfs |grep -v '^#'|grep -i statd_port`
                if [ $? -eq 0 ]; then
                        echo -ne "\tstatd.. configured!"
                        echo_success
                        echo
                else
                        echo -ne "\tstatd.. not configured!"
                        echo_failure
                        echo
                        return 1
                fi
                statd_out=`cat /etc/sysconfig/nfs |grep -v '^#'|grep -i statd_outgoing_port`
                if [ $? -eq 0 ]; then
                        echo -ne "\tstatd_out.. configured!"
                        echo_success
                        echo
                else
                        echo -ne "\tstatd_out.. not configured!"
                        echo_failure
                        echo
                        return 1
                fi
        fi
}

chkiptables(){
        echo "Checking if iptables is running and configured properly.. "
        status=`service iptables status`
        if [[ $status = "iptables: Firewall is not running." ]]; then
                echo -ne "\tiptables ..not running!"
                echo_failure
                echo
                return 1
        else
                echo -ne "\tiptables ..running!"
                echo_success
                echo
                ssh=`service iptables status|grep "state NEW tcp dpt:22"`
                if [ $? -eq 0 ]; then
                        echo -ne "\tssh.. allowed!"
                        echo_success
                        echo
                else
                        echo -ne "\tssh.. not allowed!"
                        echo_failure
                        echo
                        return 1
                fi
                puppet=`service iptables status|grep "tcp dpt:8140"`
                if [ $? -eq 0 ]; then
                        echo -ne "\tpuppet.. allowed!"
                        echo_success
                        echo
                else
                                echo -ne "\puppet.. not allowed!"
                        echo_failure
                        echo
                        return 1
                fi
                https=`service iptables status|grep "state NEW tcp dpt:443"`
                if [ $? -eq 0 ]; then
                        echo -ne "\thttps.. allowed!"
                        echo_success
                        echo
                else
                        echo -ne "\thttps.. not allowed!"
                        echo_failure
                        echo
                        return 1
                fi
                snmp=`service iptables status|grep "udp dpts:161:162 "`
                if [ $? -eq 0 ]; then
                        echo -ne "\tsnmp.. allowed!"
                        echo_success
                        echo
                else
                                echo -ne "\tsnmp.. not allowed!"
                        echo_failure
                        echo
                        return 1
                fi
                rsyslog=`service iptables status|grep "tcp dpt:514"`
                if [ $? -eq 0 ]; then
                        echo -ne "\trsyslog.. allowed!"
                        echo_success
                        echo
                else
                                echo -ne "\trsyslog.. allowed!"
                        echo_failure
                        echo
                        return 1
                fi
                portmap=`service iptables status|grep "dpt:111"|wc -l`
                if [ $portmap -eq 2 ]; then
                        echo -ne "\tportmap.. allowed!"
                        echo_success
                        echo
                else
                                echo -ne "\tportmap.. not allowed!"
                        echo_failure
                        echo
                        return 1
                fi
                nfsd=`service iptables status|grep "dpt:2049"|wc -l`
                if [ $nfsd -eq 2 ]; then
                        echo -ne "\tnfsd.. allowed!"
                        echo_success
                        echo
                else
                        echo -ne "\tnfsd.. not allowed!"
                        echo_failure
                        echo
                        return 1
                fi
                mountd=`service iptables status|grep "dpt:892"|wc -l`
                if [ $portmap -eq 2 ]; then
                        echo -ne "\tportmap.. allowed!"
                        echo_success
                        echo
                else
                                echo -ne "\tportmap.. not allowed!"
                        echo_failure
                        echo
                        return 1
                fi
                statd=`service iptables status|grep "dpt:662"|wc -l`
                if [ $statd -eq 2 ]; then
                        echo -ne "\tstatd.. allowed!"
                        echo_success
                        echo
                else
                                echo -ne "\tstatd.. not allowed!"
                        echo_failure
                        echo
                        return 1
                fi
                rquotad=`service iptables status|grep "dpt:875"|wc -l`
                if [ $rquotad -eq 2 ]; then
                        echo -ne "\trquotad.. allowed!"
                        echo_success
                        echo
                else
                                echo -ne "\trquotad.. not allowed!"
                        echo_failure
                        echo
                        return 1
                fi
                lockd_tcp=`service iptables status|grep "tcp dpt:32803"`
                if [ $? -eq 0 ]; then
                        echo -ne "\tlockd_tcp.. allowed!"
                        echo_success
                        echo
                else
                                echo -ne "\tlockd_tcp.. not allowed!"
                        echo_failure
                        echo
                        return 1
                fi
                lockd_udp=`service iptables status|grep "udp dpt:32769"`
                if [ $? -eq 0 ]; then
                        echo -ne "\tlockd_udp.. allowed!"
                        echo_success
                        echo
                else
                                echo -ne "\tlockd_udp.. not allowed!"
                        echo_failure
                        echo
                        return 1
                fi
        fi
}

chkstartup () {
        # Services that should be on at startup
        start_on=( slapd sshd dhcpd snmpd nfs xinetd iptables )

        # Services that should be off at startup
        # start_off=( clvmd libvirtd drbd )

        echo "Check startup services:"
        for srvc in ${start_on[@]}
        do
                echo -ne "\tCheck $srvc..."
                srvcstart=`chkconfig --list $srvc | gawk '{ print $4 }'`
                echo -n "$srvcstart"
                if [ "$srvcstart" = "2:on" ]; then
                        echo_success
                        echo
                else
                        echo_failure
                        echo
                        return 1
                fi
        done

        return 0
}

# Function that checks selinux status.
chkselinux(){
        echo "Checking if selinux is enforced"
        status=`getenforce`
        if [[ $status = "Enforcing" ]]; then
                echo -ne "\tselinux ..Enforcing!"
                echo_success
		echo
        else
                echo -ne "\tselinux ..$status!"
                echo -ne "\n\tPlease set selinux to enforcing"
                echo_failure
                echo
        fi
}

chkdhcp(){
	echo "Checking if dhcp is running.."
	status=`service dhcpd status`
	if [[ $status = "dhcpd is stopped" ]]; then
		echo -ne "\tdhcp ..not running!"
		echo_failure
		echo
		return 1
	else
		echo -ne "\tdhcp ..running!"
		echo_success
		echo
		return 0
	fi
}

chksnmp(){
        echo "Checking if snmpd service is running and configured properly.. "
        status=`service snmpd status`
	pid=(`ps aux|grep \/usr\/sbin\/snmpd| grep -v grep|gawk '{print $2}'`)
        if [[ $status = "snmpd (pid  $pid) is running..." ]]; then
                echo -ne "\tsnmpd ..running!"
                echo_success
                rocommunity=$(cat /etc/snmp/snmpd.conf|grep -i "rocommunity cloudtopt3")
                #rouser=$(cat /etc/snmp/snmpd.conf|grep -i "rouser snmpuser authpriv")
                if [ "$rocommunity" = "rocommunity CLOUDTOPT3" ]; then
                        echo -ne "\tsnmp ..configured properly!"
                        echo_success
                        echo
                else
                        echo -ne "\tsnmp ..not configured properly!"
                        echo_failure
                        echo
                fi
        else
                echo -ne "\tsnmpd ..not running!"
                echo -ne "\n\tPlease start snmpd service"
                echo_failure
                echo
                return 1
        fi
}

chknetboot(){
	echo "Checking if tftp is running.."
	status=`service xinetd status`
	able=`cat /etc/xinetd.d/tftp |grep disable |awk '{print $3}'`
	if [ "$status" = "xinetd is stopped" -o "$able" != "no"  ]; then
		echo -ne "\tnetboot ..not running!"
		echo_failure
		echo
		return 1
	else
		echo -ne "\tnetboot ..running!"
		echo_success
		echo
	fi
	
	version=`ls /tftpboot/node_fs/image-v*|gawk -F/ '{print $4}'|gawk -F- '{print $2}'`
	if [ $version != "v0.9.4.2"  ]; then
		echo -ne "\t$version tc firmware ..not updated!"
		echo_failure
		echo
		return 1
	else 
		echo -ne "\t$version tc firmware ..updated!"
		echo_success
		echo
	fi

	export=`cat /etc/exports |grep "/tftpboot 172.16.1.0/24(rw,sync,no_root_squash,no_subtree_check)"`
	if [ $? -eq 0 ]; then
		echo -ne "\t/etc/exports.. configured!"
                echo_success
                echo
	else
		echo -ne "\t/etc/exports.. not configured!"
		echo_failure
		echo
		return 1
	fi
	return 0
}

# Function to check the return value, and exit if it is not 0
# This is used to check the return value of each function after it is run
# If a check fails, the gatekeep script exits.
error () {
        if [ $1 -ne 0 ]; then
                exit $1
        fi
}

ret=0

checkos
error $?

chkname
error $?

chkhosts
error $?

chkldap
error $?

chkiface
error $?

pingtest
error $?

chksslcert
error $?

chkssl
error $?

chksysconfigldap
error $?

chkinternet
error $?

chknfs
error $?

chkiptables
error $?

chkselinux
error $?

chkdhcp
error $?

chksnmp	
error $?

chkstartup
error $?

chknetboot
error $?

# If all the tests are OK, the LOG file is deleted.
# If there are tests that failed, LOG file is retained so that
# the gatekeeper can review the dumped outputs.
if [ $ret -eq 0 ]; then
	echo "All tests OK."
	#rm -f $LOG
else
	echo "Some tests failed. Please review $LOG file."
fi

exit $ret
