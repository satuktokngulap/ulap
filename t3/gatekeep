#!/bin/bash
# ---------------------------------------------------------
# T3 2-NODE DRBD BUILD GATEKEEPER SCRIPT - Baremetal Checks - v0.1
# ---------------------------------------------------------
# This is the official script used by Cloud Team to gatekeep
# T3 2-node DRBD baremetal setups. It runs a series of config and 
# service checks to verify if the servers have been properly configured.
# If an error is encountered in any step of the the gatekeeping checks,
# the script exits with a value of 1
#
# ALL THE GATEKEEPING CHECKS CONDUCTED BY THE SCRIPT SHOULD RETURN
# OK FOR THE BUILD TO BE READY FOR DEPLOYMENT/USE!!!
#
# Author: Isabel Montes
# Latest Update: January 17, 2014
# ---------------------------------------------------------


# Include init.d "functions" file, to be able to use echo_success and
# echo_failure functions
. /etc/init.d/functions

# Take time stamp to be used for the log/dump file
STAMP=$(date +%m%d%y%H%M)

# Redirectcommands that output to standard output to the following $LOG file
LOG="/root/gatekeep_$STAMP"

# Define variables
HOSTNAME=$(uname -n) # the baremetal's hostname
ME=${HOSTNAME:0:2}
CLUSTER="$(echo $HOSTNAME | gawk -F'.' '{print $2}')"
if [ "$ME" = "sa" ]; then
	# If I am node "sa", then my peer must be node "sb"
        PEER="sb.$CLUSTER.cloudtop.ph"
else PEER="sa.$CLUSTER.cloudtop.ph"
fi

# Enumerate the VMs that are expected to be running on the baremetal
vms=( "a_vm_ldap" "a_vm_rdpminta" "b_vm_lms" "b_vm_rdpmintb" )

# Function that checks the DRBD config and DRBD service status
drbdconfig(){
	ret=0
	echo -n "Checking DRBD config..." | tee -a $LOG
	
	# drbdadm dump will dump the DRBD config to $LOG and
	#will return 0 if no errors are encountered
	drbdadm dump >> $LOG
	if [ $? -eq 0 ]; then
        	echo -n "no errors"
	        echo_success
	        echo
	else
	        echo -n "errors found!"
	        echo_failure
	        echo
		ret=1
	fi

	# Check the drbd service status. This will indicate if
	# drbd module was properly loaded
	echo -n "Checking DRBD status..."
	local drbd=`service drbd status | gawk '/drbd driver/ {print $4}'`
	if [ "$drbd" = "OK;" ]; then
	        echo -n "drbd driver loaded"
	        echo_success
	        echo
	else
	        echo -n "drbd driver not loaded!"
	        echo_failure
	        echo
		ret=1
	fi
	
	# Use the drbd-overview command to check the number of resources
	# If the command returns incorrect number of lines, either there
	# are incorrect number of resources defined, or the resources
	# are still syncing
	echo -n "Counting number of DRBD resources..."
	if [ $(drbd-overview | wc -l) -eq 2 ]; then
		# The latest build should have 2 resources defined
	        echo -n "2 resources"
	        echo_success
	        echo
	else
	        echo -n "incorrect no. of resources or resources are syncing"
	        echo_failure
	        echo
		ret=1
	fi

	return $ret	
}

# Function that checks states of each drbd resource
# Function accepts an array of resource names and does checks on each one
drbdcheck() {
	drbdret=0
	for re in $@
        do
		echo -e "\t$re status: "
        	local states=( `drbd-overview | gawk '/'$re'/ {print $2" "$3" "$4}'` )
		# Connection state must be "Connected"
        	echo -ne "\t\tConnection state: ${states[0]}"
	        if [ "${states[0]}" = "Connected" ]; then
	                echo_success
	                echo
	        else 
			echo_failure
			drbdret=1
	        fi
		
		# Resources must be configured as both Primary
	        echo -ne "\t\tRole: ${states[1]}"
	        if [ "${states[1]}" = "Primary/Primary" ]; then
	                echo_success
	                echo
	        else
			echo_failure
			drbdret=1
	        fi
	
		# The disks have to be both UpToDate
	        echo -ne "\t\tDisk state: ${states[2]}"
	        if [ "${states[2]}" = "UpToDate/UpToDate" ]; then
	                echo_success
	                echo
                else
			echo_failure
			drbdret=1
	        fi
	done
	return $drbdret
}

# Function that checks if the /etc/hosts entries are complete
# These entries are used by various services configured/installed
# in our T3 build. Function uses a simple grep to find if /etc/hosts
# contains the all the hostnames. No checks are done to verify
# if the correct IP addresses are matched against the hostnames.
# This could be added later on as an enhancement of the check, but it
# is assumed that any errors in this area will also probably be detected
# when the network checks and VM checks are executed.
chkhosts () {
	# List of hostnames that must appear in /etc/hosts
	hostnames=( $HOSTNAME $PEER "ipmi.$HOSTNAME" "ipmi.$PEER" "ldap.$CLUSTER.cloudtop.ph" "ldap.local" "lms.local" "rdpminta.local" "rdpmintb.local" "puppetmaster.cloudtop.ph" "virtualip.$CLUSTER.cloudtop.ph" )

	for name in ${hostnames[@]}
	do
		echo -ne "\t$name..."
		grep $name /etc/hosts >> $LOG
		if [ $? -eq 0 ]; then
			echo -n "found"
			echo_success
			echo
		else
			echo -n "missing!"
			echo_failure
			echo
			return 1
		fi
	done
	return 0
}

# Function that checks OS version and architecture. Our T3 2-node
# DRBD build should be using CentOS 6.4 x86_64 architecture
checkos() {
	echo "Checking OS version..."
        	arch=$(cat /proc/version | gawk '{print $3}')
		version=$(cat /etc/issue | gawk 'NR==1 {print $1" "$3}')
	        echo -ne "\t$version ${arch:(-6)}"
	       	if [ "${arch:(-6)}" = "x86_64" -a "$version" = "CentOS 6.4" ]; then
	                echo_success
        	        echo
			return 0
	else
	        echo -ne "Incorrect version!"
	        echo_failure
	        echo
		return 1
	fi
}

# Function that checks if bridge interface is properly configured. This
# is used by the chkiface() function.
# It accepts an argument and looks for this in brctl show and checks
# if it is properly bridged to the correct eth interface. This check simply
# verifies if the trailing numbers of the interface names are matching
#	i.e. interface br0 should be bridged to eth0
#	     and interface br1 shouldbe bridged to eth1
chkbridge () {
                echo -ne "\tChecking if $1 is bridged to eth${1:(-1)}..."
                bridged=`brctl show $1 | gawk '!/^bridge|^\t/ {print $4}'`
                if [ "$bridged" = "eth${1:(-1)}" ]; then
                        echo -n "correct"
                        echo_success
                        echo
			return 0
                else
                        echo -n "please check $1 config!"
                        echo_failure
                        echo
                        return 1
                fi

} 

# Function that checks if the network interfaces are configured correctly.
# The baremetal should have 4 interfaces configured: br0, br1, eth0, and eth1
# br0 and br1 are bridged to eth0 and eth1 respectively.
# br0 should be configured with an IP address.
chkiface() {
	echo "Checking network interfaces"
	ifaces=( `ifconfig -a | sed 's/[ \t].*//;/^\(lo\|\|v.*\)$/d'` )

	# Check if there are indeed 4 interfaces
	if [ ${#ifaces[@]} -ne 4 ]; then
		echo -n "incorrect # of interfaces!"
		echo_failure
		echo
		return 1
	fi

	for i in ${ifaces[@]}
	do
		case $i in
		br0)
			# Check if br0 has an IP address
			ip=`ifconfig $i | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
			# Check if br0 is a bridged interface
			chkbridge $i
			if [ $? -ne 0 ]; then
				return 1
			fi

			# Check if gateway is pingable
			gateway=`echo $ip | gawk -F. '{print $1"."$2"."$3".1"}'`
        	        echo -ne "\t$i $ip...pinging gateway $gateway "
	                chkping=`ping -c 2 $gateway`
        	        if [ $? -eq 0 ]; then
	                        echo_success
	                        echo
	                else
	                        echo_failure
	                        echo
	                        return 1
	                fi
		;;
		br1)
			# Check if br1 is a bridged interface
	                chkbridge $i
	                if [ $? -ne 0 ]; then
	                        return 1
	                fi
		;;
		eth[0-1])
			ip="<no address>"
			echo -ne "\t$i $ip"
			echo_success
			echo
		;;
		*)
			# Check fails if interface does not follow naming
			# convention
			echo "\t$i $ip - unexpected interface!"
			echo_failure
			echo
			return 1
		;;
		esac
	done
	return 0
}

# Function that tries to ping all the addresses listed in /etc/hosts
pingtest() {
	echo "Ping tests on /etc/hosts addresses..."
	hosts=( `cat /etc/hosts | gawk '!/127.0.0.1|::1|^#|^'$HOSTNAME'/ && /./ {print $1","$2}'` )
	for host in ${hosts[@]}
	do
	echo -ne "\tPinging $host..." | tee -a $LOG
	addr=$(echo $host | gawk -F, '{print $2}')
	ping -c 2 $addr >> $LOG
                if [ $? -eq 0 ]; then
                        echo_success
                        echo
                else
                        echo_failure
                        echo
                        return 1
                fi
	done
	return 0
}

# Function to check if hostname follows our naming convention pattern:
# 	i.e. <sa|sb>.<School ID>.cloudtop.ph
chkname () {
	echo -n "Checking hostname pattern against *.*.cloudtop.ph"
	if [[ "$HOSTNAME" = *"."*".cloudtop.ph" ]]; then
		echo_success
		echo
		return 0
	else
		echo_failure
		echo
		return 1
	fi
}

# Function to check cluster configuration and if services are setup properly
# - Uses ccs_config_validate to validate the current /etc/cluster/cluster.conf
# - Uses rg_test noop command to test the services and VMs
chkcluster () {
	echo -n "Validating cluster config..."
	ccs_config_validate
	if [ $? -eq 0 ]; then
		echo_success
		echo
	else
		echo_failure
		echo
		return 1
	fi

	echo "Running rg_test on services..."
	local services=( "powerinit" "storage_sa" "storage_sb" )

	for service in ${services[@]}
	do
		# rg_test the services:
		echo -n "Testing $service..." | tee -a $LOG
		rg_test noop /etc/cluster/cluster.conf start service $service >> $LOG
		if [ $? -eq 0 ]; then
			echo -n "Test start of $service succeeded"
			echo_success
			echo
		else
			echo_failure
			echo
			return 1
		fi
	done

	# Does a simple check of service status for nfs-shared service,
	# instead of the rg_test, because rg_test is expected to fail if
	# the test is not being run on the server currently owning the
	# service.
	echo -n "Checking if nfsservice is started..." | tee -a $LOG
	nfsservice=`clustat -s nfs-shared | gawk '!/^ Service|^ -/ {print $3}'`
	if [ "$nfsservice" = "started" ]; then
		echo -n "status is started."
		echo_success
		echo
	else
		echo -n "not started!"
		echo_failure
		echo
		return 1
	fi
	
	# Run rg_test check on the vms that are expected to be configured
	for vm in ${vms[@]}
	do
		echo -n "Testing $vm..." | tee -a $LOG
		rg_test noop /etc/cluster/cluster.conf start vm $vm >> $LOG
		if [ $? -eq 0 ]; then
			echo -n "Test start of $vm succeeded"
			echo_success
			echo
		else
			echo_failure
			echo
			return 1
		fi
	done

	# Check if cman cluster manager is running
	echo -n "Checking if cman is running..."
	service cman status
	if [ $? -eq 0 ]; then
		echo_success
		echo
	else
		echo_failure
		echo
		return 1
	fi
	
	return 0
}

# Function to test if ssh via rsa key authentication is configured correctly.
# The two servers in the cluster should be able to root ssh to one another
# without having to enter a password. This functionality is required by some
# of the clustering/vm migration implementations.
# The function accepts the name of the peer server as an argument,
# and tries to ssh to it using BatchMode=yes. The ssh in batch mode will
# fail if a password is still needed for authentication.
testssh () {
	echo -n "Test ssh to $1..."
	ssh -o BatchMode=yes $1 'exit'
	if [ $? -eq 0 ]; then
        	echo -n "succeeded"
	        echo_success
	        echo
		return 0
	else
	        echo -n "failed!"
	        echo_failure
	        echo
	        return 1
	fi
}

# Function to check if autostart of the VMs is already configured.
# Two things are checked by the function:
# 1. There should be a start_vm.sh file under the root directory. This
#    is the script that calls the commands to start the VMs once the
#    storage service is already started
# 2. There should be a line in the /etc/rc.local file that calls
#    the start_vm.sh script at startup
chkvmstart () {
	echo -n "Checking if start_vm.sh exists..."
	if [ -f "/root/start_vm.sh" ]; then
   		echo -n "File exists."
   		echo_success
   		echo
   	else
   		echo -n "File not found!"
   		echo_failure
   		echo
   		return 1
	fi
	
	echo -n "Checking if autostart is configured..."
	grep "/root/start_vm.sh 2>&1 &" /etc/rc.local >> $LOG
	if [ $? -eq 0 ]; then
		echo_success
		echo
	else
		echo_failure
		echo
		return 1
	fi
	return 0
}


# Function to check if all the VMs have corresponding xml files.
# The function also checks and if migration works, as these make use
# of the xml files saved in the directory defined in the cluster.conf
# file.
chkvmxml () {
	# The directory of the xml files as configured in
	# the /etc/cluster/cluster.conf file
	local xmldir=/shared/system/definitions/
	echo "Checking if xml files are complete"
	for vm in ${vms[@]}
	do
		echo -ne "\tLocating $vm.xml..."
		# Check if the xml file exists
		if [ -f ${xmldir}${vm}.xml ]; then
			echo -n "found."
			echo_success
			echo

			# Test migration
			echo -ne "\tTesting migration..."
			local owner=`clustat -s vm:$vm | gawk '!/^ Service|^ -/ {print $2}'`

			# If the owner is server "sa", do migration to "sb"
			# then back to "sa";
			# If the owner is server "sb", do migration to "sa"
			# then back to "sb";
			case $owner in
				$HOSTNAME )
					clusvcadm -M vm:$vm -m $PEER >> $LOG
					if [ $? -eq 0 ]; then
						echo -n "to ${PEER:0:2} [ok]; "
						sleep 5
						clusvcadm -M vm:$vm -m $HOSTNAME >> $LOG
						if [ $? -ne 0 ]; then
							echo -n "to ${HOSTNAME:0:2} [failed]; "
							echo_failure
							echo
							return 1
						else
							echo -n "to ${HOSTNAME:0:2} [ok];"
							echo_success
							echo
						fi
					else
						echo -n "to ${PEER:0:2} [failed]; "
						echo_failure
						echo
						return 1
					fi
					;;
				$PEER )
					clusvcadm -M vm:$vm -m $HOSTNAME >> $LOG
					if [ $? -eq 0 ]; then
						echo -n "to ${HOSTNAME:0:2} [ok]; "
						sleep 5
						clusvcadm -M vm:$vm -m $PEER >> $LOG
						if [ $? -ne 0 ]; then
							echo -n "to ${PEER:0:2} [failed]; "
							echo_failure
							echo
							return 1
						else
							echo -n "to ${PEER:0:2} [ok]; "
							echo_success
							echo
						fi
					else
						echo -n "to ${HOSTNAME:0:2} [failed]; "
						echo_failure
						echo
						return 1
					fi
					;;
				* )
					;;
			esac
		else
			echo -n "not found!"
			echo_failure
			echo
			return 1
		fi
	done
	return 0	
}

# Function to check files and config files for power management
chkpower () {
	local config=/etc/power_mgmt.cfg
	local exc=/usr/sbin/powerdaemon
	local dir=/usr/scripts/powerdaemon/src

	echo "Check if config file exists"
		echo -e "\tLocating power_mgmt.conf..."
		if [ -f $config ]; then
			echo -ne "\t\tPower management config file exists"
			echo_success
			echo
		else
			echo -n "file not found!"
		fi

	echo "Check if executable file exists"
		echo -e "\tLocating executable file..."
		if [ -f $exc ]; then
			echo -ne "\t\tPower management config file exists"
			echo_success
			echo
			echo -ne "\tCheck if file is executable..."
			if [ -x $exc ]; then
				echo -n "file is executable"
				echo_success
				echo
			else
				echo -n "file not set to executable!"
				echo_failure
				echo
				return 1
			fi
		else
			echo -n "file not found!"
			echo_failure
			echo
			return 1
		fi

	echo "Check if script directory exists"
		echo -e "\tLocating directory..."
		if [ -d $dir ]; then
			echo -ne "\t\tPower management scripts directory exists"
			echo_success
			echo
		else
			echo -n "directory not found!"
			echo_failure
			echo
			return 1
		fi

	echo "Check chkconfig if power management is included"
		#skipped for now

	echo -n "Check if power management was autostarted..."
		local status=`service powerinit status`
		if [[ $? -eq 0 ]]; then
			echo -ne "started"
			echo_success
			echo
		else
			echo -ne "not started or failed!"
			echo_failure
			return 1
		fi

	return 0
}

# Function for checking BT Sync Components
chkbt () {
	#check config file
	echo
	#check for executable file


}

# Function to check if services are properly set to on or off
# at startup. Uses `chkconfig --list` to check.
chkstartup () {
	# Services that should be on at startup
	start_on=( cman rgmanager iptables )

	# Services that should be off at startup
	start_off=( clvmd libvirtd drbd )
	
	echo "Check startup services:"
	for srvc in ${start_on[@]}
	do
		echo -ne "\tCheck $srvc..."
		srvcstart=`chkconfig --list $srvc | gawk '{ print $4 }'`
		echo -n "$srvcstart"
		if [ "$srvcstart" = "2:on" ]; then
			echo_success
			echo
		else
			echo_failure
			echo
			return 1
		fi
	done
	
	echo "Checking services that should be off at startup:"
	for srvc in ${start_off[@]}
	do
		echo -ne "\tCheck $srvc..."
		srvcstart=`chkconfig --list $srvc | gawk '{ print $4 }'`
		echo -n "$srvcstart"
		if [ "$srvcstart" = "2:off" ]; then
			echo_success
			echo
		else
			echo_failure
			echo
			return 1
		fi
	done
	
	return 0
}

# Function that checks if users 'cloud' and 'sysad' have been created, if they have the 
# correct groups, and if they have been configured as sudoers correctly
#       cloud user will be used by the Cloud Team for remote management.
#       sysad user will be used by non Cloud Team members for management
#               and troubleshooting. Only a select set of commands are
#               permitted for the sysad account
chkusers () {
        # Check if users exist
        echo -n "Checking if cloud user exists..." | tee -a $LOG
        id cloud >> $LOG
        if [ $? -eq 1 ]; then
                echo -n "no user 'cloud'!"
                echo_failure
                echo
                return 1
        else
                echo -n "user cloud exists"
                echo_success
                echo
                echo -n "Checking if sysad user exists..." | tee -a $LOG
                id sysad >> $LOG
                if [ $? -eq 1 ]; then
                        echo -n "no user 'sysad'!"
                        echo_failure
                        echo
                        return 1
                else
                        echo -n "user sysad exists"
                        echo_success
                        echo
                fi
        fi

        # Access checks
        # Check if 'cloud' and 'sysad' users are part of the 'libvirt' group; This required
        # to allow the user to manage the VMs remotely via virt-manager
        echo -n "Checking if cloud user is added to libvirt group..."
        if [ -z "$(grep ^libvirt /etc/group | gawk '/cloud/')" ]; then
                echo_failure
                echo
                return 1
        else
                echo_success
                echo
                echo -n "Checking if sysad user is added to libvirt group..."
                if [ -z "$(grep ^libvirt /etc/group | gawk '/sysad/')" ]; then
                        echo_failure
                        echo
                        return 1
                else
                        echo_success
                        echo
                fi
        fi

        # sudoers check: check the sudoers file if the required lines have
        # been entered correctly

        echo -n "Checking if Cmnd_Alias SYSADCMD is defined..." | tee -a $LOG
        grep -F "Cmnd_Alias SYSADCMD = /bin/ls, /bin/cat, /bin/grep, /usr/bin/tail, /usr/bin/head, /usr/bin/top, /usr/bin/virsh, /bin/ping, /bin/netstat, /sbin/ifconfig, /sbin/poweroff, /sbin/shutdown, /sbin/service cman status, /sbin/service rgmanager status, /sbin/service clvmd status, /sbin/service libvirtd status, /sbin/service drbd status, /sbin/service gfs2 status, /home/sysad/check_services.sh, /sbin/service cman status, /usr/sbin/ccs_config_validate, /sbin/parted -s /dev/sda print free, /sbin/parted -s /dev/sdb print free" /etc/sudoers >> $LOG
        if [ $? -eq 1 ]; then
                echo_failure
                echo
                return 1
        else
                echo_success
                echo
        fi

        echo -n "Checking if cloud user has correct sudo config..."
        grep -F "cloud ALL=NOPASSWD: /sbin/poweroff, /sbin/reboot, /sbin/shutdown" /etc/sudoers >> $LOG
        if [ $? -eq 1 ]; then
                echo -n "missing/incorrect sudoers entry for cloud!"
                echo_failure
                echo
                return 1
        else
                            grep -F "cloud ALL=(ALL) ALL" /etc/sudoers >> $LOG
                if [ $? -eq 1 ]; then
                        echo -n "missing/incorrect sudoers entry for cloud!"
                        echo_failure
                        echo
                        return 1
                else
                        echo_success
                        echo
                fi
        fi

        echo -n "Checking if sysad user has correct sudo config..."
        grep -F "sysad ALL=(ALL) SYSADCMD" /etc/sudoers >> $LOG
        if [ $? -eq 1 ]; then
                echo -n "missing/incorrect sudoers entry for sysad!"
                echo_failure
                echo
                return 1
        else
                echo_success
                echo
        fi

        return 0
}

# Checks if SNMP service is running and if the correct rocommunity has been configured
checksnmp(){
        echo "Checking if snmpd service is running and configured properly.. "
        status=`service snmpd status`
        if [[ $status = " * snmpd is running" ]]; then
                echo -ne "\tsnmpd ..running!"
                echo_success
                rocommunity=$(cat /etc/snmp/snmpd.conf|grep -i "rocommunity cloudtopt3")
                #rouser=$(cat /etc/snmp/snmpd.conf|grep -i "rouser snmpuser authpriv")
                if [ "$rocommunity" = "rocommunity CLOUDTOPT3" ]; then
                        echo -ne "\tsnmp ..configured properly!"
                        echo_success
                        echo
                else
                        echo -ne "\tsnmp ..not configured properly!"
                        echo_failure
                        echo
                fi
        else
                echo -ne "\tsnmpd ..not running!"
                echo -ne "\n\tPlease start snmpd service"
                echo_failure
                echo
                return 1
        fi
}

# Function to check the return value, and exit if it is not 0
# This is used to check the return value of each function after it is run
# If a check fails, the gatekeep script exits.
error () {
	if [ $1 -ne 0 ]; then
		exit $1
	fi
}

ret=0

# Allow a user to run only selected functions within the gatekeep script
# User can pass the function names as arguments to `./gatekeep` and
# The script will attempt to run commands, and dump outputs to a 
# log file appended with ".<function name>"
if [ $# -ne 0 ]; then
	for command in $@
	do
		LOG="$LOG.$command"
		type $command &>/dev/null && $command || echo "Error running '"$command"'!"
		error $?
	done
	exit $?
fi

# If no arguments are passed to `./gatekeep`, proceed to 
# run all the checks.
echo
echo "###############################"
echo "T3 Gatekeeping - DRBD Build"
echo "Dumping output to: $LOG"
echo "###############################"
echo

# HOSTNAME - Check hostname naming convention
chkname
error $?

# Disk Structure and Capacity - Check disk sizes
echo -n "Checking sda size..."
sda=`parted -s /dev/sda print | gawk '/Disk/ {print $3}'`
echo -n "$sda"
if [ "$sda" = "500GB" ]; then
	echo_success
	echo
else
	echo -n "Incorrect disk size!"
	echo_failure
	echo
	exit 1
fi

echo -n "Checking sdb size..."
sdb=`parted -s /dev/sdb print | gawk '/Disk/ {print $3}'`
echo -n "$sdb"
if [ "$sdb" = "500GB" ]; then
	echo_success
	echo
else
	echo -n "Incorrect disk size!"
	echo_failure
	echo
	exit 1
fi

# /etc/hosts entries
echo "Checking if /etc/hosts entries are complete..."
chkhosts
error $?

# DRBD Checks
# Check the config
drbdconfig
error $?

# Check the status of resources
echo "Checking status of resources..."
res=( `drbd-overview | gawk -F'[: ]' '{print $4}'` )
drbdcheck ${res[@]}
error $?

# OS Version and Architecture check
checkos
error $?

# Network Checks
# Check the interfaces
chkiface
error $?

# Do a ping test to all the addresses listed in /etc/hosts
pingtest
error $?

# Cluster Configuration checks
chkcluster
error $?

# VM Checks
# Check if VMs are configured to autostart
chkvmstart
error $?

# Check if the VM xml files exist in the expected directory
chkvmxml
error $?

# Access checks
chkusers
error $?

# Check SNMP Service
chksnmp
error $?

# Check startup services
chkstartup
error $?

# Check if ssh authenticatio via rsa keys is configured correctly
testssh $PEER # Try to ssh to peer via hostname
error $?

testssh $( gethostip -d $PEER ) # Try to ssh to peer via IP address
error $?

# Check power management
chkpower
error $?

# If all the tests are OK, the LOG file is deleted.
# If there are tests that failed, LOG file is retained so that
# the gatekeeper can review the dumped outputs.
if [ $ret -eq 0 ]; then
	echo "All tests OK."
	rm -f $LOG
else
	echo "Some tests failed. Please review $LOG file."
fi

exit $ret
